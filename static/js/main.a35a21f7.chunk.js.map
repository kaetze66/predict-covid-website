{"version":3,"sources":["../ /^/.//.*$/ groupOptions: {} namespace object","Visualizations.tsx","transformData.ts","Configuration.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","graphCategories","name","color","Visualizations","loading","data","className","maxBarSize","margin","top","right","left","bottom","category","replace","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","interval","type","domain","dataMax","Math","round","width","strokeDasharray","stackId","fillOpacity","stroke","fill","transformData","csvData","csvText","headers","join","Papa","parse","header","transformHeader","transform","v","skipEmptyLines","Configuration","onDataFileUpdate","App","useState","dataFile","useDataFile","setLoading","setData","useEffect","console","log","a","dataUrl","default","fetch","response","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a35a21f7.chunk.js","sourcesContent":["var map = {\n\t\"./00_full_results.csv\": [\n\t\t358,\n\t\t3\n\t],\n\t\"./results_sd_20_80.csv\": [\n\t\t359,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 128;\nmodule.exports = webpackAsyncContext;","import React from 'react';\r\nimport { ResponsiveContainer, AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, Area } from 'recharts';\r\nimport './Visualizations.scss';\r\n\r\nconst graphCategories = [\r\n  { name: 'Infected asymptomatic', color: '#FFDC00' },\r\n  { name: 'Infected symptomatic', color: '#FF851B' },\r\n  { name: 'Critical Cases', color: '#FF4136' },\r\n  { name: 'Diseased', color: '#111111' },\r\n  { name: 'Susceptible', color: '#7FDBFF' },\r\n  { name: 'Isolated', color: '#001f3f' },\r\n  { name: 'Recovered', color: '#2ECC40' },\r\n];\r\n\r\nexport default function Visualizations({ loading, data }: { loading: boolean; data: object[] }) {\r\n  if (loading) return null;\r\n\r\n  return (\r\n    <div className=\"Visualizations\">\r\n      <ResponsiveContainer>\r\n        <AreaChart maxBarSize={8000000} data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\r\n          <defs>\r\n            {graphCategories.map(category => (\r\n              <linearGradient id={`color${category.name.replace(/ /g, '')}`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop offset=\"5%\" stopColor={category.color} stopOpacity={0.8} />\r\n                <stop offset=\"95%\" stopColor={category.color} stopOpacity={0.5} />\r\n              </linearGradient>\r\n            ))}\r\n          </defs>\r\n          <XAxis dataKey=\"index\" interval={19} />\r\n          <YAxis type=\"number\" domain={[0, dataMax => Math.round(dataMax)]} width={75} />\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <Tooltip />\r\n          {graphCategories.map(category => (\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey={category.name}\r\n              stackId=\"1\"\r\n              fillOpacity={1}\r\n              stroke={category.color}\r\n              fill={`url(#color${category.name.replace(/ /g, '')})`}\r\n            />\r\n          ))}\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n}\r\n","import Papa from 'papaparse';\r\n\r\nexport default function transformData(csvData: string): DataPoint[] {\r\n  const csvText = `${headers.join(';')}\r\n${csvData}`;\r\n  const { data } = Papa.parse(csvText, {\r\n    header: true,\r\n    transformHeader: header => header || 'index',\r\n    transform: v => +v,\r\n    skipEmptyLines: true,\r\n  });\r\n  return data;\r\n}\r\n\r\nconst headers = [\r\n  'index',\r\n  'Infected asymptomatic',\r\n  'Infected symptomatic',\r\n  'Critical Cases',\r\n  'Diseased',\r\n  'Susceptible',\r\n  'Isolated',\r\n  'Recovered',\r\n  'total infected',\r\n  'accumulated cases',\r\n];\r\n\r\ninterface DataPoint {\r\n  index: number;\r\n  'Infected asymptomatic': number;\r\n  'Infected symptomatic': number;\r\n  'Critical Cases': number;\r\n  Diseased: number;\r\n  Susceptible: number;\r\n  Isolated: number;\r\n  Recovered: number;\r\n  'total infected': number;\r\n  'accumulated cases': number;\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Configuration({\r\n  loading,\r\n  onDataFileUpdate,\r\n}: {\r\n  loading: boolean;\r\n  onDataFileUpdate: (dataUrl: string) => void;\r\n}) {\r\n  if (loading) return null;\r\n\r\n  return (\r\n    <div className=\"Configuration\">\r\n      <button>nice</button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport Visualizations from './Visualizations';\nimport transformData from './transformData';\nimport Configuration from './Configuration';\nimport './App.scss';\n\nconst baseData = 'results_sd_20_80.csv'; // '00_full_results.csv';\n\nexport default function App() {\n  const [dataFile, useDataFile] = useState(baseData);\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<any>(null);\n\n  useEffect(() => {\n    setLoading(true);\n    console.log(import(`!file-loader!../data/${dataFile}`));\n    import(`!file-loader!../data/${dataFile}`).then(async ({ default: dataUrl }) => {\n      const csvData = await fetch(dataUrl).then(response => response.text());\n      setData(transformData(csvData) as any);\n      setLoading(false);\n    });\n  }, [dataFile]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Covid Progress</h1>\n      </header>\n      <aside>\n        <Configuration loading={loading} onDataFileUpdate={useDataFile} />\n      </aside>\n      <main>\n        <Visualizations loading={loading} data={data} />\n      </main>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}